/*****************************************/
/*										**/
/*			Install NodeJS				**/
/*										**/
/*****************************************/

> curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
> sudo apt install -y nodejs




/*****************************************/
/*										**/
/*		Drivers ARDUINO MEGA 2560		**/
/*		Chip chinese module				**/
/*										**/
/*****************************************/

technique qui marche!!

http://www.blaxlab.com/2015/06/arduino-mega-2560-clone-comparison-to.html?m=1

trouver sur commentaires Aliexpress ali express
MAC
    Download Mac drivers for CH340G from here (Non English site)
    Run the following command in Terminal: >sudo nvram boot-args="kext-dev-mode=1"
    Restart system
RASPBERRY
	installer les header raspberry pour modif kernel
	> sudo apt-get -y install raspberrypi-kernel-headers
	On verifie le code vendor et produit de lobjet usb (arduino ici)
	> lsusb
	> sudo modprobe usbserial vendor=0x1a86 product=0x7523
Pour charger automatiquement à chaque démarrage le module USBSerial, il suffit de rajouter cette ligne dans le fichier “/etc/modules”. 
usbserial vendor=0x1a86 product=0x7523

/*****************************************/
/*										**/
/*										**/
/*		PATCH MJPG STREAMER				**/
/*										**/
/*										**/
/*****************************************/

> nano input_uvc_patch
On copie tout ca dans le fichier

--- plugins/input_uvc/input_uvc.c       (revision 174)
+++ plugins/input_uvc/input_uvc.c       (working copy)
@@ -405,9 +405,13 @@
         if(pcontext->videoIn->formatIn == V4L2_PIX_FMT_YUYV) {
             DBG("compressing frame from input: %d\n", (int)pcontext->id);
             pglobal->in[pcontext->id].size = compress_yuyv_to_jpeg(pcontext->videoIn, pglobal->in[pcontext->id].buf, pcontext->videoIn->framesizeIn, gquality);
+            /* copy this frame's timestamp to user space */
+            pglobal->in[pcontext->id].timestamp = pcontext->videoIn->buf.timestamp;
         } else {
             DBG("copying frame from input: %d\n", (int)pcontext->id);
-            pglobal->in[pcontext->id].size = memcpy_picture(pglobal->in[pcontext->id].buf, pcontext->videoIn->tmpbuffer, pcontext->videoIn->buf.bytesused);
+            pglobal->in[pcontext->id].size = memcpy_picture(pglobal->in[pcontext->id].buf, pcontext->videoIn->tmpbuffer, pcontext->videoIn->tmpbytesused);
+            /* copy this frame's timestamp to user space */
+            pglobal->in[pcontext->id].timestamp = pcontext->videoIn->tmptimestamp;
         }
 
 #if 0
@@ -418,8 +422,6 @@
         prev_size = global->size;
 #endif
 
-        /* copy this frame's timestamp to user space */
-        pglobal->in[pcontext->id].timestamp = pcontext->videoIn->buf.timestamp;
 
         /* signal fresh_frame */
         pthread_cond_broadcast(&pglobal->in[pcontext->id].db_update);
Index: plugins/input_uvc/v4l2uvc.c
===================================================================
--- plugins/input_uvc/v4l2uvc.c (revision 174)
+++ plugins/input_uvc/v4l2uvc.c (working copy)
@@ -450,6 +450,8 @@
         */
 
         memcpy(vd->tmpbuffer, vd->mem[vd->buf.index], vd->buf.bytesused);
+        vd->tmpbytesused = vd->buf.bytesused;
+        vd->tmptimestamp = vd->buf.timestamp;
 
         if(debug)
             fprintf(stderr, "bytes in used %d \n", vd->buf.bytesused);
Index: plugins/input_uvc/v4l2uvc.h
===================================================================
--- plugins/input_uvc/v4l2uvc.h (revision 174)
+++ plugins/input_uvc/v4l2uvc.h (working copy)
@@ -28,6 +28,7 @@
 
 
 #include <stdio.h>
+#include <stdint.h>
 #include <string.h>
 #include <fcntl.h>
 #include <unistd.h>
@@ -105,6 +106,8 @@
     int framecount;
     int recordstart;
     int recordtime;
+    uint32_t tmpbytesused;
+    struct timeval tmptimestamp;
 };
 
 /* context of each camera thread */
 
 
 
 
 

patch -p0 < input_uvc_patch
make USE_LIBV4L2=true clean all
sudo make install
